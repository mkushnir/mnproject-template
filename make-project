#!/bin/sh

usage() {
    echo "`basename $0` [ -t {prog|lib} ] [ -v VERSIONINFO ] [ -n ] [ -f ] project-name"
    echo "`basename $0` -h"
}

type=prog
_PTYPE=PROG
_OWN=BINOWN
_GRP=BINGRP
_MNAME='foo.c main.c'
_BSD=prog
_SHLIB=
_VERSIONINFO="-version-info 0:0:0"
force=0
noinit=0
subdirs=third-party/asd

args=`getopt fhnt:v: $*`
if test $? -ne 0
then
    usage
    exit 2
fi
set -- $args
while true
do
    case "$1" in
    -f)
        shift
        force=1
        ;;
    -h)
        usage
        exit
        ;;
    -n)
        shift
        noinit=1
        ;;
    -t)
        shift
        type="$1"
        shift
        ;;
    -v)
        shift
        _VERSIONINFO="-version-info $1"
        shift
        ;;
    --)
        shift
        break
        ;;
    esac
done

pname="$1"
if test "$pname" = ""
then
    echo "no project ...";
    exit 1;
fi

if test -d "$pname" -a $force -eq 0
then
    echo "duplicate project ..."
    exit 1
fi

echo "Creating project $pname ..."

if ! test -d "$pname"
then
    mkdir "$pname"
fi

( cd $pname && tar -cvz -f- -C ../default-project . | tar -xvz -f- )

#cp -R default-project "$pname";
symbol_pname=`echo $pname | sed -e 's/[^a-zA-Z0-9_]/_/g'`

if test "$type" = "lib"
then
    _PTYPE=LIB
    _OWN=LIBOWN
    _GRP=LIBGRP
    _MNAME=$pname.c
    _BSD=lib
    _SHLIB="SHLIB_NAME=lib${pname}.so"
    canonical_pname="lib${pname}.la"
    _AM_PROG="lib_LTLIBRARIES = lib${pname}.la"
    _LIB_HEADERS="nobase_include_HEADERS = $pname.h"
    _TEST_LIB_HEADERS="#noinst_HEADERS = ../src/$pname.h"
    _GENDATA_LDFLAGS="-L\$(top_srcdir)/src/.libs"
    _TESTFOO_LDFLAGS="-L\$(top_srcdir)/src/.libs"
    _TESTBAR_LDFLAGS="-L\$(top_srcdir)/src/.libs"
    _LIBLD=LIBADD
    rm "$pname/src/main.c"
    touch $pname/src/$pname.c $pname/src/$pname.h $pname/src/${pname}_private.h
    for i in $pname/src/$pname.h $pname/src/${pname}_private.h
    do
        n=`basename $i`
        nn=`echo $n | sed 'y/abcdefghijklnmopqrstuvwxyz.-/ABCDEFGHIJKLNMOPQRSTUVWXYZ__/'`
        cat <<EOD >$i
#ifndef ${nn}_DEFINED
#define ${nn}_DEFINED

#include <limits.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include <stdlib.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
}
#endif
#endif /* ${nn}_DEFINED */
EOD
    done
else
    canonical_pname=$pname
    _AM_PROG="bin_PROGRAMS = $pname"
    _LIB_HEADERS="nobase_include_HEADERS ="
    _TEST_LIB_HEADERS="#noinst_HEADERS ="
    _LIBLD=LDADD
fi

canonical_pname=`echo $canonical_pname | sed -e 's/[^a-zA-Z0-9_]/_/g'`

echo "Writing Makefile's for $pname ..."

cat << EOD > $pname/src/Makefile.freebsd
# Created by `basename $0`
$_PTYPE=$pname
$_SHLIB

$_OWN=\$(USER)
$_GRP=\$(USER)

DESTDIR=\$(HOME)
BINDIR=/bin
LIBDIR=/lib
LIBCOMPATDIR=/lib/compat
LIBDATADIR=/libdata
LINTLIBDIR=/libdata/lint
SHAREDIR=/share
INCLUDEDIR=/include
# re-write bsd.libnames.mk
LIBOBJC=/usr/lib/libobjc.a
LIBC=/usr/lib/libc.a

NO_MAN=
CSTD=c99
CFLAGS+= -Wall -Wextra -Werror  -g

.ifdef SHARED
CFLAGS+= -shared
.endif

SRCS=	$_MNAME diag.c
diags=	diag.txt

SUBDIR=test

.ifndef USE_GCC
CC=clang -Qunused-arguments -fcolor-diagnostics
CXX=clang++
CPP=clang-cpp
.endif

diag.c ${pname}-diag.h: \${diags}
#	cat \$(diags) >diag.txt.tmp && mndiagen -S diag.txt.tmp -L $symbol_pname -H ${pname}-diag.h -C diag.c *.[ch]
	cat \$(diags) >diag.txt.tmp && mndiagen -S diag.txt.tmp -L global -H ${pname}-diag.h -C diag.c *.[ch]

.include <bsd.$_BSD.mk>

shared:
	\${MAKE} -DSHARED

run: all
	LD_LIBRARY_PATH=\$(HOME)/lib ./\${PROG}

testrun:
.for i in \$(SUBDIR)
	cd \$(i) && \$(MAKE) testrun
.endfor

EOD

cat <<EOD >$pname/configure.ac
AC_PREREQ([2.69])
AC_INIT([$pname], [0.1], [markiyan.kushnir@gmail.com], [$pname], [https://github.com/mkushnir])

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SUBDIRS([$subdirs])
echo "lto_sources =" > \${ac_pwd}/lto-sources.mk
dnl echo "lto_sources += \`\${ac_pwd}/find-sources \${ac_pwd}/third-party/asd/src\`" >> \${ac_pwd}/lto-sources.mk
AC_CONFIG_FILES([Makefile src/Makefile test/Makefile man/Makefile])


AS_IF([test -n "\$USE_GCC"],
[
    probe="gcc\${USE_GCC}"
    AS_IF([which \$probe >/dev/null],
    [
        CC="gcc\${USE_GCC}"
        CXX="c++\${USE_GCC}"
        CPP="cpp"
    ],
    [
        AS_IF([which gcc >/dev/null],
        [
            CC="gcc"
            CXX="g++"
            CPP="cpp"
        ],
        [
            echo "Cannot find gcc"
            exit 1
        ])
    ])
    AC_SUBST(CC_DEBUG, ['-ftrapv'])
],
[
    AS_IF([which clang >/dev/null],
    [
        CC="clang -Qunused-arguments -fcolor-diagnostics"
        CXX="clang++ -Qunused-arguments -fcolor-diagnostics"
        CPP="clang-cpp"
        clang_version=\`clang --version | grep version | awk '{print \$4;}'\`
        clang_version_mjr=\`echo \$clang_version | awk -F. '{print \$1;}'\`
        clang_version_mnr=\`echo \$clang_version | awk -F. '{print \$2;}'\`
        AS_IF([test "\$clang_version_mjr" = "3" -a "\$clang_version_mnr" -lt 3],
            [AC_SUBST(CC_DEBUG, ['-ftrapv -fcatch-undefined-behavior'])],
            [AC_SUBST(CC_DEBUG, ['-fsanitize=undefined-trap -fsanitize-undefined-trap-on-error -fno-sanitize=alignment'])])
        AC_SUBST(CC_LTO, ['-flto'])
        AC_SUBST(LD_LTO, ['-Wl,--lto-O3'])
    ],
    [
        CC="cc"
        CXX="c++"
        CPP="cpp"
        AC_SUBST(CC_DEBUG, ['-ftrapv'])
    ])
])


AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AS_CASE(["\$target_os"],
    [*linux*], [AC_SUBST(_GNU_SOURCE_MACRO, ['-D_GNU_SOURCE'])],
    [AC_SUBST(_GNU_SOURCE_MACRO)]
)

AS_CASE(["\$target_os"],
    [*darwin*], [AC_SUBST(_XOPEN_SOURCE_MACRO, ['-D_XOPEN_SOURCE'])],
    [AC_SUBST(_XOPEN_SOURCE_MACRO)]
)


AM_INIT_AUTOMAKE([foreign subdir-objects])
LT_INIT
AM_SILENT_RULES([yes])

dnl AM_MAINTAINER_MODE


AC_LANG(C)

AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_FUNC_MALLOC
AC_FUNC_REALLOC

AC_CHECK_FUNCS([srandomdev])
AC_CHECK_HEADERS([malloc.h])
AC_CHECK_HEADER_STDBOOL


AC_PRESERVE_HELP_ORDER

AC_ARG_ENABLE(debug,
              AC_HELP_STRING([--enable-debug],
                             [Enable debug build (default=no)]))

AM_CONDITIONAL([DEBUG], [test "\$enable_debug" = "yes"])

AC_ARG_ENABLE(allstatic,
              AC_HELP_STRING([--enable-allstatic],
                             [Enable all static build (default=no)]),
              [AC_MSG_NOTICE([Will build statically])],
              [AC_MSG_NOTICE([Will not build statically])])

AM_CONDITIONAL([ALLSTATIC], [test "\$enable_allstatic" = "yes"])

AC_ARG_ENABLE(lto,
              AC_HELP_STRING([--enable-lto],
                             [Enable all static build (default=no)]),
              [AC_MSG_NOTICE([Will enable LTO])],
              [AC_MSG_NOTICE([Will not enable LTO])])

AM_CONDITIONAL([LTO], [test "\$enable_lto" = "yes"])

AC_ARG_WITH(cmocka,
            AC_HELP_STRING([--with-cmocka],
            [Build CMocka tests (default=no)]))

AM_CONDITIONAL([CMOCKA], [test "\$with_cmocka" = "yes"])

AM_CONDITIONAL([LINUX], [echo \$build_os | grep linux >/dev/null])
AM_CONDITIONAL([FREEBSD], [echo \$build_os | grep freebsd >/dev/null])
AM_CONDITIONAL([DARWIN], [echo \$build_os | grep darwin >/dev/null])

#dnl pass LDFLAGS=-L\${LOCALBASE}/lib in the environment
#AC_CHECK_LIB(mrkcommon, _fini, [], [AC_MSG_FAILURE(libmrkcommon.so is required. Please find it at git@github.com:mkushnir/mrkcommon.git)])

AC_OUTPUT
EOD

cat <<EOD >$pname/Makefile.am
SUBDIRS = $subdirs
SUBDIRS += src man test
DIST_SUBDIRS = $subdirs
DIST_SUBDIRS += src man test
#CLEANFILES = *.in *.m4 *.log *.scan configure
ACLOCAL_AMFLAGS = '-Im4'
AM_MAKEFLAGS = -s

run:
	for i in \$(SUBDIRS); do if test "\$\$i" != "."; then cd \$\$i && \$(MAKE) run && cd ..; fi; done;

testrun:
	for i in \$(SUBDIRS); do if test "\$\$i" != "."; then cd \$\$i && \$(MAKE) testrun && cd ..; fi; done;
EOD

cat <<EOD >$pname/src/Makefile.am
# consider headers:
#   - include_HEADERS
#   - nobase_include_HEADERS
#   - pkginclude_HEADERS
#   - dist_HEADERS
#   - nodist_HEADERS
#   - noinst_HEADERS

diags = diag.txt
BUILT_SOURCES = diag.c ${pname}-diag.h
EXTRA_DIST = \$(diags)
CLEANFILES = \$(BUILT_SOURCES) *.core core
#CLEANFILES += *.in
AM_MAKEFLAGS = -s

${_AM_PROG}

${_LIB_HEADERS}

${canonical_pname}_SOURCES = $_MNAME
nodist_${canonical_pname}_SOURCES = diag.c
noinst_HEADERS = ${pname}-diag.h

DEBUG_LD_FLAGS =
if DEBUG
DEBUG_CC_FLAGS = -g -O0 @CC_DEBUG@
DEBUG_LD_FLAGS += -no-install
else
DEBUG_CC_FLAGS = -DNDEBUG -O3 -fomit-frame-pointer
if LTO
DEBUG_CC_FLAGS += @CC_LTO@
DEBUG_LD_FLAGS += @LD_LTO@
endif
endif

if ALLSTATIC
${canonical_pname}_LDFLAGS = -all-static
else
${canonical_pname}_LDFLAGS =
endif

${canonical_pname}_CFLAGS = \$(DEBUG_CC_FLAGS) -Wall -Wextra -Werror -std=c99 @_GNU_SOURCE_MACRO@ @_XOPEN_SOURCE_MACRO@ -I\$(top_srcdir)/src -I\$(top_srcdir) -I\$(includedir)

${canonical_pname}_LDFLAGS += \$(DEBUG_LD_FLAGS) ${_VERSIONINFO} -L\$(libdir)
${canonical_pname}_${_LIBLD} = -lmndiag
#${canonical_pname}_${_LIBLD} += -lmrkcommon
#${canonical_pname}_LDFLAGS += \$(DEBUG_LD_FLAGS) -all-static
#${canonical_pname}_LDFLAGS += \$(DEBUG_LD_FLAGS) -all-static -Wl,-Bdynamic,-L\$(libdir),-lfoo -lqwe,-Bstatic

diag.c ${pname}-diag.h: \$(diags)
#	\$(AM_V_GEN) cat \$(diags) | sort -u >diag.txt.tmp && mndiagen -S diag.txt.tmp -L $symbol_pname -H ${pname}-diag.h -C diag.c *.[ch]
	\$(AM_V_GEN) cat \$(diags) | sort -u >diag.txt.tmp && mndiagen -S diag.txt.tmp -L global -H ${pname}-diag.h -C diag.c *.[ch]

run: all
	for i in \$(bin_PROGRAMS); do if test -x ./\$\$i; then LD_LIBRARY_PATH=\$(libdir) ./\$\$i; fi; done;

testrun:
	for i in \$(SUBDIRS); do if test "\$\$i" != "."; then cd \$\$i && \$(MAKE) testrun && cd ..; fi; done;
EOD

cat <<EOD >$pname/test/Makefile.am
BUILT_SOURCES = diag.c ${pname}-diag.h
CLEANFILES = \$(BUILT_SOURCES) *.core core
#CLEANFILES += *.in
AM_MAKEFLAGS = -s

# consider headers:
#   - include_HEADERS
#   - nobase_include_HEADERS
#   - pkginclude_HEADERS
#   - dist_HEADERS
#   - nodist_HEADERS
#   - noinst_HEADERS
noinst_HEADERS = unittest.h

noinst_PROGRAMS = testfoo gendata

if CMOCKA
noinst_PROGRAMS += testbar
endif

EXTRA_DIST = \$(diags) runscripts

${_TEST_LIB_HEADERS}

diags = diag.txt ../src/diag.txt

DEBUG_LD_FLAGS =
if DEBUG
DEBUG_CC_FLAGS = -g -O0 @CC_DEBUG@
DEBUG_LD_FLAGS += -no-install
else
DEBUG_CC_FLAGS = -DNDEBUG -O3 -fomit-frame-pointer
if LTO
DEBUG_CC_FLAGS += @CC_LTO@
DEBUG_LD_FLAGS += @LD_LTO@
#include \$(top_srcdir)/lto-sources.mk
endif
endif

if ALLSTATIC
testfoo_LDFLAGS = -all-static
testbar_LDFLAGS = -all-static
gendata_LDFLAGS = -all-static
else
testfoo_LDFLAGS =
testbar_LDFLAGS =
gendata_LDFLAGS =
endif

nodist_testfoo_SOURCES = diag.c
testfoo_SOURCES = \$(lto_sources) testfoo.c
testfoo_CFLAGS = \$(DEBUG_CC_FLAGS) -Wall -Wextra -Werror -std=c99 @_GNU_SOURCE_MACRO@ @_XOPEN_SOURCE_MACRO@ -I\$(top_srcdir)/test -I\$(top_srcdir)/src -I\$(top_srcdir) -I\$(includedir)
testfoo_LDFLAGS += \$(DEBUG_LD_FLAGS) ${_TESTFOO_LDFLAGS}
testfoo_LDADD = -l${pname} -lmndiag
#testfoo_LDADD += -lmrkcommon

if CMOCKA
testbar_SOURCES = \$(lto_sources) testbar.c
testbar_CFLAGS = \$(DEBUG_CC_FLAGS) -Wall -Wextra -Werror -std=c99 @_GNU_SOURCE_MACRO@ @_XOPEN_SOURCE_MACRO@ -I\$(top_srcdir)/test -I\$(top_srcdir)/src -I\$(top_srcdir) -I\$(includedir)
#testbar_LDFLAGS += \$(DEBUG_LD_FLAGS) ${_TESTBAR_LDFLAGS} -L\$(libdir) -lmrkcommon -lmndiag -lcmocka
testbar_LDFLAGS += \$(DEBUG_LD_FLAGS) ${_TESTBAR_LDFLAGS}
testbar_LDADD = -l${pname} -lmndiag -lcmocka
#testbar_LDADD += -lmrkcommon
endif

nodist_gendata_SOURCES = diag.c
gendata_SOURCES = \$(lto_sources) gendata.c
gendata_CFLAGS = \$(DEBUG_CC_FLAGS) -Wall -Wextra -Werror -std=c99 @_GNU_SOURCE_MACRO@ @_XOPEN_SOURCE_MACRO@ -I\$(top_srcdir)/test -I\$(top_srcdir)/src -I\$(top_srcdir) -I\$(includedir)
gendata_LDFLAGS += \$(DEBUG_LD_FLAGS) ${_GENDATA_LDFLAGS} -L\$(libdir)
gendata_LDADD = -l${pname} -lmrkcommon -lmndiag

diag.c ${pname}-diag.h: \$(diags)
#	\$(AM_V_GEN) cat \$(diags) | sort -u >diag.txt.tmp && mndiagen -S diag.txt.tmp -L $symbol_pname -H ${pname}-diag.h -C diag.c ../src/*.[ch] *.[ch]
	\$(AM_V_GEN) cat \$(diags) | sort -u >diag.txt.tmp && mndiagen -S diag.txt.tmp -L global -H ${pname}-diag.h -C diag.c ../src/*.[ch] *.[ch]

testfoo-run: testfoo
	@if test -x $>; \\
	    then LD_LIBRARY_PATH=\$(libdir) ./$> \$\${\$(>)_ARGS}; \\
	    else true; \\
	fi

testrun: all
	for i in \$(noinst_PROGRAMS); do if test -x ./\$\$i; then LD_LIBRARY_PATH=\$(libdir) ./\$\$i; fi; done;
EOD

myname="`id -un`"
# starting from FreeBSD 10, Linux-compatible
fullname="`getent passwd $myname | awk -F: '{print $5;}'`"

cat <<EOD >$pname/COPYING
# \$Id:$

The compilation of software known as "$pname" is distributed under the
following terms:

Copyright (c) `date '+%Y'` $fullname. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \`\`AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
EOD

if test $noinit -eq 0
then
    echo "Initial run of autotools ..."
    cd $pname
    set -x
    aclocal
    autoheader
    #autoreconf
    automake --add-missing
    libtoolize
    autoreconf
fi

echo "Project $pname created -- OK";

exit 0;
